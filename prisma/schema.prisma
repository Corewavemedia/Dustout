generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                String   @id @default(uuid())
  username          String   @unique
  email             String   @unique
  created_at        DateTime @default(now())
  is_verified       Boolean  @default(true)
  verification_token String?
  role              String   @default("user") // "user" or "admin"
  
  // Additional fields for user profile
  fullname          String?
  address           String?
  phone             String?
  
  // Relationship to bookings and subscriptions
  bookings          Booking[]
  subscriptions     Subscription[]
  
  @@map("users")
}

model Service {
  id          String            @id @default(uuid())
  name        String
  description String?
  icon        String?           // URL or path to icon
  isActive    Boolean           @default(true)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  
  // Relationships
  variables   ServiceVariable[]
  bookings    BookingService[]
  
  @@map("services")
}

model ServiceVariable {
  id        String   @id @default(uuid())
  serviceId String
  name      String   // e.g., "1 bedroom", "2 bedroom", "per square meter"
  unitPrice Float    // Price per unit
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relationship
  service   Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  
  @@map("service_variables")
}

model Booking {
  id              String   @id @default(uuid())
  userId          String
  fullName        String
  phone           String
  email           String
  serviceAddress  String
  cityState       String?
  postCode        String?
  landmark        String?
  serviceFrequency String
  preferredDate   String?
  startTime       String?
  endTime         String?
  isUrgent        String   @default("No")
  notes           String?
  status          String   @default("pending")
  estimatedPrice  Float?   // Calculated estimated price
  staffId         String?  // Optional staff assignment
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relationships
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  staff           Staff?           @relation(fields: [staffId], references: [id], onDelete: SetNull)
  services        BookingService[]
  
  @@map("bookings")
}

model BookingService {
  id        String @id @default(uuid())
  bookingId String
  serviceId String
  quantity  Int    @default(1) // e.g., number of bedrooms, bathrooms, etc.
  unitPrice Float  // Price at time of booking
  
  // Relationships
  booking   Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  service   Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  
  @@map("booking_services")
}

model Subscription {
  id          String   @id @default(uuid())
  userId      String
  planName    String   // e.g., "Basic Plan", "Premium Plan", "Enterprise Plan"
  startDate   DateTime @default(now())
  expiryDate  DateTime
  status      String   @default("active") // "active", "expired", "cancelled"
  revenue     Float    // Amount paid for the subscription
  email       String?
  phone       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relationship
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("subscriptions")
}

model Staff {
  id            String   @id @default(uuid())
  staffImage    String?  // URL or path to staff image
  firstName     String
  lastName      String
  role          String
  servicesRendered String[] // Array of service IDs or names
  salary        String
  email         String   @unique
  phoneNumber   String
  address       String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relationships
  bookings      Booking[]
  
  @@map("staff")
}

model BlockedDate {
  id          String   @id @default(uuid())
  blockedDate DateTime @unique @db.Date // The specific date that is blocked
  reason      String?  // Optional admin's note like "Public Holiday" or "Maintenance"
  createdAt   DateTime @default(now())
  
  @@map("blocked_dates")
}